{"mappings":"AAKA,MAAMA,EAAY,CAChB,CAAEC,MAAO,SAAUC,KAAM,WAAYC,KAAM,KAAMC,OAAQ,MACzD,CAAEH,MAAO,QAASC,KAAM,SAAUC,KAAM,KAAMC,OAAQ,MACtD,CAAEH,MAAO,UAAWC,KAAM,UAAWC,KAAM,KAAMC,OAAQ,MACzD,CAAEH,MAAO,QAASC,KAAM,QAASC,KAAM,KAAMC,OAAQ,MACrD,CAAEH,MAAO,WAAYC,KAAM,SAAUC,KAAM,KAAMC,OAAQ,MACzD,CAAEH,MAAO,WAAYC,KAAM,aAAcC,KAAM,KAAMC,OAAQ,MAC7D,CAAEH,MAAO,MAAOC,KAAM,SAAUC,KAAM,KAAMC,OAAQ,MACpD,CAAEH,MAAO,YAAaC,KAAM,WAAYC,KAAM,KAAMC,OAAQ,MAC5D,CAAEH,MAAO,MAAOC,KAAM,WAAYC,KAAM,KAAMC,OAAQ,MACtD,CAAEH,MAAO,WAAYC,KAAM,QAASC,KAAM,KAAMC,OAAQ,MACxD,CAAEH,MAAO,OAAQC,KAAM,UAAWC,KAAM,KAAMC,OAAQ,MACtD,CAAEH,MAAO,QAASC,KAAM,cAAeC,KAAM,KAAMC,OAAQ,OAgD1C,IAAIJ,GAAWK,QAChC,EAACF,KAAEA,KAAWA,GAAQ,MAAQA,GAAQ,OAMxB,IAAIH,GAAWM,KAAI,EAACL,MAAEA,EAAKC,KAAEA,KAAW,GAAGD,KAASC,MAKnD,IAAIF,GAAWO,MAAK,CAACC,EAAGC,IAAMD,EAAEL,KAAOM,EAAEN,OAKvC,IAAIH,GAAWU,QAChC,CAACC,GAAYR,KAAEA,EAAIC,OAAEA,KAAaA,EAASD,EAAOQ,GAClD,GAKe,IAAIX,GAAWO,MAC9B,CAACC,EAAGC,IAAMA,EAAEL,OAASK,EAAEN,MAAQK,EAAEJ,OAASI,EAAEL,QAO9B,IADF,IAAIS,SAASC,iBAAiB,oBAEzCP,KAAIQ,GAAQA,EAAKC,cACjBV,QAAOW,GAAUA,EAAOC,SAAS,QAKlB,CAnFhB,mBACA,eACA,eACA,iBACA,kBACA,iBACA,cACA,gBACA,oBACA,kBACA,kBACA,eACA,mBACA,gBACA,kBACA,mBACA,iBACA,aACA,gBACA,cACA,gBACA,eACA,cACA,cACA,kBACA,aACA,iBACA,cACA,cACA,iBACA,iBACA,oBACA,aACA,gBACA,sBACA,kBACA,iBACA,qBACA,cACA,iBACA,iBA2C4BV,MAAK,CAACN,EAAOC,KACzC,MAAOgB,EAAOC,GAAUlB,EAAMmB,MAAM,OAC7BC,EAAOC,GAAUpB,EAAKkB,MAAM,MACnC,OAAOF,EAAQG,EAAQ,GAAI,CAAE,IAwBb,CAjBhB,MACA,MACA,QACA,QACA,OACA,OACA,MACA,MACA,OACA,OACA,MACA,MACA,MACA,SAI0BX,QAAO,CAACa,EAAKC,KAElCD,EAAIC,KAAOD,EAAIC,GAAQ,GAC5BD,EAAIC,KACGD,IACN","sources":["src/js/04-array-cardio-day-1.js"],"sourcesContent":["// Get your shorts on - this is an array workout!\n// ## Array Cardio Day 1\n\n// Some data we can work with\n\nconst inventors = [\n  { first: 'Albert', last: 'Einstein', year: 1879, passed: 1955 },\n  { first: 'Isaac', last: 'Newton', year: 1643, passed: 1727 },\n  { first: 'Galileo', last: 'Galilei', year: 1564, passed: 1642 },\n  { first: 'Marie', last: 'Curie', year: 1867, passed: 1934 },\n  { first: 'Johannes', last: 'Kepler', year: 1571, passed: 1630 },\n  { first: 'Nicolaus', last: 'Copernicus', year: 1473, passed: 1543 },\n  { first: 'Max', last: 'Planck', year: 1858, passed: 1947 },\n  { first: 'Katherine', last: 'Blodgett', year: 1898, passed: 1979 },\n  { first: 'Ada', last: 'Lovelace', year: 1815, passed: 1852 },\n  { first: 'Sarah E.', last: 'Goode', year: 1855, passed: 1905 },\n  { first: 'Lise', last: 'Meitner', year: 1878, passed: 1968 },\n  { first: 'Hanna', last: 'HammarstrÃ¶m', year: 1829, passed: 1909 },\n];\n\nconst people = [\n  'Bernhard, Sandra',\n  'Bethea, Erin',\n  'Becker, Carl',\n  'Bentsen, Lloyd',\n  'Beckett, Samuel',\n  'Blake, William',\n  'Berger, Ric',\n  'Beddoes, Mick',\n  'Beethoven, Ludwig',\n  'Belloc, Hilaire',\n  'Begin, Menachem',\n  'Bellow, Saul',\n  'Benchley, Robert',\n  'Blair, Robert',\n  'Benenson, Peter',\n  'Benjamin, Walter',\n  'Berlin, Irving',\n  'Benn, Tony',\n  'Benson, Leana',\n  'Bent, Silas',\n  'Berle, Milton',\n  'Berry, Halle',\n  'Biko, Steve',\n  'Beck, Glenn',\n  'Bergman, Ingmar',\n  'Black, Elk',\n  'Berio, Luciano',\n  'Berne, Eric',\n  'Berra, Yogi',\n  'Berry, Wendell',\n  'Bevan, Aneurin',\n  'Ben-Gurion, David',\n  'Bevel, Ken',\n  'Biden, Joseph',\n  'Bennington, Chester',\n  'Bierce, Ambrose',\n  'Billings, Josh',\n  'Birrell, Augustine',\n  'Blair, Tony',\n  'Beecher, Henry',\n  'Biondo, Frank',\n];\n// Array.prototype.filter()\n// 1. Filter the list of inventors for those who were born in the 1500's\nconst filterTask = [...inventors].filter(\n  ({ year }) => year >= 1500 && year <= 1599\n);\n// console.log(filterTask);\n\n// Array.prototype.map()\n// 2. Give us an array of the inventors first and last names\nconst mapTask = [...inventors].map(({ first, last }) => `${first} ${last}`);\n// console.log(mapTask);\n\n// Array.prototype.sort()\n// 3. Sort the inventors by birthdate, oldest to youngest\nconst sortTask = [...inventors].sort((a, b) => a.year - b.year);\n// console.log(sortTask);\n\n// Array.prototype.reduce()\n// 4. How many years did all the inventors live all together?\nconst reduceTask = [...inventors].reduce(\n  (totalYears, { year, passed }) => passed - year + totalYears,\n  0\n);\n// console.log(reduceTask);\n\n// 5. Sort the inventors by years lived\nconst taskFive = [...inventors].sort(\n  (a, b) => b.passed - b.year - (a.passed - a.year)\n);\n// console.log(taskFive);\n\n// 6. create a list of Boulevards in Paris that contain 'de' anywhere in the name\n// https://en.wikipedia.org/wiki/Category:Boulevards_in_Paris\nconst links = [...document.querySelectorAll('.mw-category a')];\nconst taskSix = [...links]\n  .map(link => link.textContent)\n  .filter(street => street.includes('de'));\n// console.log(taskSix);\n\n// 7. sort Exercise\n// Sort the people alphabetically by last name\nconst taskSeven = [...people].sort((first, last) => {\n  const [aLast, aFirst] = first.split(', ');\n  const [bLast, bFirst] = last.split(', ');\n  return aLast > bLast ? 1 : -1;\n});\n// console.log(taskSeven);\n\n// 8. Reduce Exercise\n// Sum up the instances of each of these\nconst data = [\n  'car',\n  'car',\n  'truck',\n  'truck',\n  'bike',\n  'walk',\n  'car',\n  'van',\n  'bike',\n  'walk',\n  'car',\n  'van',\n  'car',\n  'truck',\n];\n\n// Empty obj, because we don't know the values that we are going to recieve\nconst taskEight = [...data].reduce((obj, item) => {\n  // iteratting through the obj\n  if (!obj[item]) obj[item] = 0; //if no item previously - setting to zero and then adding\n  obj[item]++;\n  return obj;\n}, {});\n// console.log(taskEight);\n"],"names":["$7656f788375e9220$var$inventors","first","last","year","passed","filter","map","sort","a","b","reduce","totalYears","document","querySelectorAll","link","textContent","street","includes","aLast","aFirst","split","bLast","bFirst","obj","item"],"version":3,"file":"04-array-cardio-day-1.a28e060d.js.map"}